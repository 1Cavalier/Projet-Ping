package controller;

import model.Equipe;
import model.Joueur;
import view.PanelEquipe;

import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class AjouterJoueurDansEquipe implements ActionListener {

    private final PanelEquipe panel;

    public AjouterJoueurDansEquipe(PanelEquipe panel) {
        this.panel = panel;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        int selectedRow = panel.getTableJoueursSansEquipe().getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(panel, "Veuillez s√©lectionner un joueur.", "Erreur", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String nom = panel.getNomField().getText().trim();
        String prenom = panel.getPrenomField().getText().trim();
        String numEquipeText = panel.getNumeroEquipeFieldJoueur().getText().trim();

        if (numEquipeText.isEmpty()) {
            JOptionPane.showMessageDialog(panel, "Veuillez saisir un num√©ro d'√©quipe.", "Erreur", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int numeroEquipe;
        try {
            numeroEquipe = Integer.parseInt(numEquipeText);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(panel, "Le num√©ro d'√©quipe doit √™tre un entier.", "Erreur", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // R√©cup√©rer joueur non assign√© depuis la liste principale
        Joueur joueurTrouve = null;
        for (Joueur j : panel.getListeJoueurs()) {
            if (j.getNom().equals(nom) && j.getPrenom().equals(prenom) && j.getNumeroEquipe() == null) {
                joueurTrouve = j;
                break;
            }
        }

        if (joueurTrouve == null) {
            JOptionPane.showMessageDialog(panel, "Le joueur est d√©j√† assign√© ou introuvable.", "Erreur", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // R√©cup√©rer l'√©quipe
        Equipe equipeTrouvee = null;
        for (Equipe eq : panel.getListeEquipes()) {
            if (eq.getNumeroEquipe() == numeroEquipe) {
                equipeTrouvee = eq;
                break;
            }
        }

        if (equipeTrouvee == null) {
            JOptionPane.showMessageDialog(panel, "Aucune √©quipe avec ce num√©ro.", "Erreur", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // V√©rifier si l'√©quipe est compl√®te
        if (equipeTrouvee.estCompletMax()) {
            JOptionPane.showMessageDialog(panel, "Cette √©quipe contient d√©j√† 4 joueurs.", "Erreur", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Ajouter le joueur
        boolean ajout = equipeTrouvee.ajouterJoueur(joueurTrouve);
        if (!ajout) {
            JOptionPane.showMessageDialog(panel, "√âchec de l'ajout du joueur √† l'√©quipe.", "Erreur", JOptionPane.ERROR_MESSAGE);
            return;
        }

        joueurTrouve.setNumeroEquipe(numeroEquipe);

        // üîÑ Mise √† jour des tableaux
        MajTableauJoueurSansEquipe.mettreAJour(panel, panel.getListeJoueurs());
        MajTableauEquipe.mettreAJour(panel, panel.getListeEquipes());

        // üîÑ Mettre √† jour aussi PanelJoueur si disponible
        if (panel.getPanelJoueur() != null) {
            MajTableauJoueur.mettreAJour(panel.getPanelJoueur().getTableModel(), panel.getListeJoueurs());
        }

        // ‚úÖ Reset des champs
        panel.getNomField().setText("");
        panel.getPrenomField().setText("");
        panel.getCategorieCombo().setSelectedIndex(0);
        panel.getNumeroEquipeFieldJoueur().setText("");

        JOptionPane.showMessageDialog(panel, "Joueur ajout√© √† l'√©quipe avec succ√®s !", "Succ√®s", JOptionPane.INFORMATION_MESSAGE);
    }
}
